#!/bin/bash
# Script de verificaci√≥n completa del proyecto FLUJO_CAJA

echo "üîç Verificando estructura completa del proyecto FLUJO_CAJA..."
echo "=================================================="

PROJECT_ROOT=$(pwd)

# Colores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Funci√≥n para verificar archivos
check_file() {
    if [ -f "$1" ]; then
        echo -e "${GREEN}‚úÖ${NC} $2"
        return 0
    else
        echo -e "${RED}‚ùå${NC} $2"
        return 1
    fi
}

# Funci√≥n para verificar directorios
check_dir() {
    if [ -d "$1" ]; then
        echo -e "${GREEN}‚úÖ${NC} $2"
        return 0
    else
        echo -e "${RED}‚ùå${NC} $2"
        return 1
    fi
}

echo -e "${BLUE}üìÅ Verificando estructura principal...${NC}"
check_file "README.md" "README principal del proyecto"
check_file "CHANGELOG.md" "Registro de cambios"
check_file "LICENSE" "Archivo de licencia"
check_file ".gitignore" "Configuraci√≥n de Git"
check_dir "docs" "Directorio de documentaci√≥n global"
check_dir "Back-FC" "Directorio del backend"
check_dir "Front-FC" "Directorio del frontend"

echo ""
echo -e "${BLUE}üìö Verificando documentaci√≥n global...${NC}"
check_file "docs/INSTALACION.md" "Gu√≠a de instalaci√≥n completa"
check_file "docs/CONFIGURACION.md" "Documentaci√≥n de configuraci√≥n"
check_file "docs/API.md" "Documentaci√≥n de API"

echo ""
echo -e "${BLUE}üêç Verificando backend...${NC}"
check_dir "Back-FC/app" "C√≥digo principal del backend"
check_dir "Back-FC/scripts" "Scripts organizados del backend"
check_dir "Back-FC/docs" "Documentaci√≥n del backend"
check_file "Back-FC/README.md" "README del backend"
check_file "Back-FC/requirements.txt" "Dependencias Python"
check_file "Back-FC/.gitignore" "Git ignore del backend"

echo ""
echo -e "${BLUE}üì¶ Verificando scripts del backend...${NC}"
check_dir "Back-FC/scripts/trm" "Scripts de TRM"
check_dir "Back-FC/scripts/setup" "Scripts de configuraci√≥n inicial"
check_dir "Back-FC/scripts/migrations" "Scripts de migraciones"
check_dir "Back-FC/scripts/utils" "Scripts de utilidades"

echo ""
echo -e "${BLUE}‚öõÔ∏è Verificando frontend...${NC}"
check_dir "Front-FC/src" "C√≥digo fuente React"
check_dir "Front-FC/scripts" "Scripts organizados del frontend"
check_dir "Front-FC/docs" "Documentaci√≥n del frontend"
check_file "Front-FC/README.md" "README del frontend"
check_file "Front-FC/package.json" "Dependencias Node.js"
check_file "Front-FC/.gitignore" "Git ignore del frontend"
check_file "Front-FC/vite.config.ts" "Configuraci√≥n de Vite"
check_file "Front-FC/tailwind.config.js" "Configuraci√≥n de Tailwind"

echo ""
echo -e "${BLUE}üîß Verificando scripts del frontend...${NC}"
check_dir "Front-FC/scripts/build" "Scripts de construcci√≥n"
check_dir "Front-FC/scripts/deploy" "Scripts de despliegue"
check_dir "Front-FC/scripts/utils" "Scripts de utilidades"

echo ""
echo -e "${BLUE}üîç Verificando archivos de configuraci√≥n...${NC}"

# Verificar si existe entorno virtual
if [ -d ".venv" ]; then
    echo -e "${GREEN}‚úÖ${NC} Entorno virtual Python (.venv)"
else
    echo -e "${YELLOW}‚ö†Ô∏è${NC}  Entorno virtual no encontrado - crear con: python -m venv .venv"
fi

# Verificar node_modules en frontend
if [ -d "Front-FC/node_modules" ]; then
    echo -e "${GREEN}‚úÖ${NC} Dependencias Node.js instaladas"
else
    echo -e "${YELLOW}‚ö†Ô∏è${NC}  Dependencias Node.js no instaladas - ejecutar: cd Front-FC && npm install"
fi

# Verificar archivos .env
if [ -f "Back-FC/.env" ]; then
    echo -e "${GREEN}‚úÖ${NC} Archivo .env del backend configurado"
else
    echo -e "${YELLOW}‚ö†Ô∏è${NC}  Archivo .env del backend no encontrado - crear seg√∫n documentaci√≥n"
fi

echo ""
echo -e "${BLUE}üìä Resumen del proyecto...${NC}"

# Contar archivos de documentaci√≥n
doc_count=$(find . -name "*.md" | wc -l)
echo "üìÑ Archivos de documentaci√≥n: $doc_count"

# Verificar si es un repositorio Git
if [ -d ".git" ]; then
    echo -e "${GREEN}‚úÖ${NC} Repositorio Git inicializado"
    
    # Mostrar rama actual si Git est√° disponible
    if command -v git &> /dev/null; then
        current_branch=$(git branch --show-current 2>/dev/null)
        if [ ! -z "$current_branch" ]; then
            echo "üåø Rama actual: $current_branch"
        fi
    fi
else
    echo -e "${YELLOW}‚ö†Ô∏è${NC}  No es un repositorio Git"
fi

echo ""
echo -e "${BLUE}üöÄ Comandos de inicio r√°pido...${NC}"
echo "Backend:"
echo "  cd Back-FC"
echo "  source .venv/bin/activate  # Linux/Mac"
echo "  .venv\\Scripts\\activate     # Windows"
echo "  python run_server.py"
echo ""
echo "Frontend:"
echo "  cd Front-FC"
echo "  npm install (si es necesario)"
echo "  npm run dev"
echo ""

echo -e "${BLUE}üìö URLs importantes...${NC}"
echo "Frontend: http://localhost:5000"
echo "Backend API: http://localhost:8000"
echo "API Docs: http://localhost:8000/docs"
echo ""

echo "=================================================="
echo -e "${GREEN}‚ú® Verificaci√≥n completada!${NC}"

# Verificar si ambos servidores pueden iniciarse (opcional)
if [ "$1" = "--test-servers" ]; then
    echo ""
    echo -e "${BLUE}üß™ Probando conectividad de servidores...${NC}"
    
    # Probar backend
    if curl -s http://localhost:8000/health > /dev/null 2>&1; then
        echo -e "${GREEN}‚úÖ${NC} Backend ejecut√°ndose en puerto 8000"
    else
        echo -e "${YELLOW}‚ö†Ô∏è${NC}  Backend no detectado en puerto 8000"
    fi
    
    # Probar frontend
    if curl -s http://localhost:5000 > /dev/null 2>&1; then
        echo -e "${GREEN}‚úÖ${NC} Frontend ejecut√°ndose en puerto 5000"
    else
        echo -e "${YELLOW}‚ö†Ô∏è${NC}  Frontend no detectado en puerto 5000"
    fi
fi
