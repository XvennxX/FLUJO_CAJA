#!/usr/bin/env python3
"""
Test para reproducir el problema del SUBTOTAL TESORER√çA que no se actualiza
cuando modificas una transacci√≥n existente.
"""
import os
import sys
from datetime import datetime, date

# Agregar directorio ra√≠z al path
root_dir = os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
sys.path.insert(0, os.path.join(root_dir, "Back-FC"))

from app.core.database import SessionLocal
from app.services.transaccion_flujo_caja_service import TransaccionFlujoCajaService
from app.services.dependencias_flujo_caja_service import DependenciasFlujoCajaService
from app.models.transacciones_flujo_caja import TransaccionFlujoCaja, AreaTransaccion
from app.schemas.flujo_caja import TransaccionFlujoCajaCreate, TransaccionFlujoCajaUpdate, AreaTransaccionSchema
from decimal import Decimal
from sqlalchemy import text

def main():
    print("=== TEST PROBLEMA SUBTOTAL TESORER√çA UPDATE ===")
    print("üéØ Reproduciendo: Modificar transacci√≥n existente no actualiza SUBTOTAL")
    
    db = SessionLocal()
    service = TransaccionFlujoCajaService(db)
    dep_service = DependenciasFlujoCajaService(db)
    
    try:
        fecha_test = date(2025, 9, 16)
        print(f"üìÖ Fecha de prueba: {fecha_test}")
        
        # 1. Limpiar datos anteriores
        print("\n1. Limpiando datos anteriores...")
        db.execute(text("""
            DELETE FROM transacciones_flujo_caja
            WHERE fecha = :fecha
            AND concepto_id IN (5, 50)
            AND cuenta_id = 1
        """), {"fecha": fecha_test})
        db.commit()
        
        # 2. Crear una transacci√≥n de tesorer√≠a inicial (ID 5 = PAGOS INTERCOMPA√ë√çAS)
        print("\n2. Creando transacci√≥n inicial de tesorer√≠a...")
        transaccion_data = TransaccionFlujoCajaCreate(
            fecha=fecha_test,
            concepto_id=5,  # PAGOS INTERCOMPA√ë√çAS
            cuenta_id=1,
            monto=Decimal("1000.00"),
            descripcion="Test inicial - PAGOS INTERCOMPA√ë√çAS",
            area=AreaTransaccionSchema.tesoreria,
            compania_id=1
        )
        
        transaccion_creada = service.crear_transaccion(transaccion_data, usuario_id=6)
        print(f"   ‚úÖ Transacci√≥n creada: ID {transaccion_creada.id}, monto ${transaccion_creada.monto}")
        
        # 3. Verificar si se cre√≥ el SUBTOTAL TESORER√çA autom√°ticamente
        subtotal_inicial = db.query(TransaccionFlujoCaja).filter(
            TransaccionFlujoCaja.fecha == fecha_test,
            TransaccionFlujoCaja.concepto_id == 50,
            TransaccionFlujoCaja.cuenta_id == 1
        ).first()
        
        if subtotal_inicial:
            print(f"   ‚úÖ SUBTOTAL TESORER√çA creado autom√°ticamente: ${subtotal_inicial.monto}")
        else:
            print("   ‚ö†Ô∏è SUBTOTAL TESORER√çA NO se cre√≥ autom√°ticamente")
            print("   üîÑ Ejecutando rec√°lculo manual...")
            dep_service.procesar_dependencias_completas_ambos_dashboards(
                fecha=fecha_test,
                concepto_modificado_id=5,
                cuenta_id=1,
                compania_id=1,
                usuario_id=6
            )
            
            # Verificar nuevamente
            subtotal_inicial = db.query(TransaccionFlujoCaja).filter(
                TransaccionFlujoCaja.fecha == fecha_test,
                TransaccionFlujoCaja.concepto_id == 50,
                TransaccionFlujoCaja.cuenta_id == 1
            ).first()
            
            if subtotal_inicial:
                print(f"   ‚úÖ SUBTOTAL TESORER√çA creado tras rec√°lculo: ${subtotal_inicial.monto}")
            else:
                print("   ‚ùå SUBTOTAL TESORER√çA sigue sin crearse")
                return
        
        # 4. PROBLEMA: Modificar la transacci√≥n existente
        print(f"\n4. Modificando transacci√≥n existente de ${transaccion_creada.monto} a $2000...")
        
        update_data = TransaccionFlujoCajaUpdate(
            monto=Decimal("2000.00"),
            descripcion="Test modificado - PAGOS INTERCOMPA√ë√çAS"
        )
        
        transaccion_actualizada = service.actualizar_transaccion(
            transaccion_creada.id, 
            update_data, 
            usuario_id=6
        )
        
        print(f"   ‚úÖ Transacci√≥n actualizada: ${transaccion_actualizada.monto}")
        
        # 5. Verificar si el SUBTOTAL TESORER√çA se actualiz√≥ autom√°ticamente
        subtotal_actualizado = db.query(TransaccionFlujoCaja).filter(
            TransaccionFlujoCaja.fecha == fecha_test,
            TransaccionFlujoCaja.concepto_id == 50,
            TransaccionFlujoCaja.cuenta_id == 1
        ).first()
        
        print(f"\n5. Verificando SUBTOTAL TESORER√çA tras actualizaci√≥n:")
        if subtotal_actualizado:
            print(f"   üìä SUBTOTAL anterior: ${subtotal_inicial.monto}")
            print(f"   üìä SUBTOTAL actual: ${subtotal_actualizado.monto}")
            
            if subtotal_actualizado.monto == Decimal("2000.00"):
                print("   ‚úÖ SUBTOTAL se actualiz√≥ correctamente")
            else:
                print("   ‚ùå PROBLEMA: SUBTOTAL NO se actualiz√≥ autom√°ticamente")
                print("   üîç Esto confirma el bug reportado por el usuario")
                
                # 6. Intentar solucionarlo con rec√°lculo completo
                print("\n6. Intentando soluci√≥n con rec√°lculo completo...")
                dep_service.procesar_dependencias_completas_ambos_dashboards(
                    fecha=fecha_test,
                    concepto_modificado_id=5,
                    cuenta_id=1,
                    compania_id=1,
                    usuario_id=6
                )
                
                # Verificar si ahora s√≠ se actualiz√≥
                subtotal_final = db.query(TransaccionFlujoCaja).filter(
                    TransaccionFlujoCaja.fecha == fecha_test,
                    TransaccionFlujoCaja.concepto_id == 50,
                    TransaccionFlujoCaja.cuenta_id == 1
                ).first()
                
                if subtotal_final and subtotal_final.monto == Decimal("2000.00"):
                    print("   ‚úÖ SOLUCIONADO: Rec√°lculo completo funciona")
                else:
                    print("   ‚ùå Problema persiste incluso con rec√°lculo completo")
        else:
            print("   ‚ùå SUBTOTAL TESORER√çA desapareci√≥ tras actualizaci√≥n")
        
        print(f"\n=== RESUMEN ===")
        print(f"üîç Transacci√≥n original: ${Decimal('1000.00')}")
        print(f"üîÑ Transacci√≥n modificada: ${transaccion_actualizada.monto}")
        print(f"üìä SUBTOTAL inicial: ${subtotal_inicial.monto if subtotal_inicial else 'N/A'}")
        print(f"üìä SUBTOTAL final: ${subtotal_actualizado.monto if subtotal_actualizado else 'N/A'}")
        
        if subtotal_actualizado and subtotal_actualizado.monto != Decimal("2000.00"):
            print("‚ùå CONFIRMADO: El bug existe - actualizar transacci√≥n no recalcula SUBTOTAL")
        elif subtotal_actualizado and subtotal_actualizado.monto == Decimal("2000.00"):
            print("‚úÖ Sin problema - SUBTOTAL se actualiza correctamente")
            
    except Exception as e:
        print(f"‚ùå Error: {e}")
        import traceback
        print(f"Traceback: {traceback.format_exc()}")
        db.rollback()
    finally:
        db.close()

if __name__ == "__main__":
    main()