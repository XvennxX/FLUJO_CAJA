#!/usr/bin/env python3
"""
Script para probar la carga del saldo inicial del d√≠a 4
"""
import sys
sys.path.append('.')

from app.core.database import get_db
from app.models.transacciones_flujo_caja import TransaccionFlujoCaja
from app.models.conceptos_flujo_caja import ConceptoFlujoCaja
from datetime import date

def main():
    db = next(get_db())
    
    # Simular la b√∫squeda que hace el frontend para el d√≠a 4
    dia_actual = date(2025, 9, 4)  # D√≠a 4
    dia_anterior = date(2025, 9, 3)  # D√≠a 3
    
    print(f'üîç Simulando carga de saldo inicial para {dia_actual}...')
    print(f'   Buscando SALDO FINAL CUENTAS del d√≠a anterior: {dia_anterior}')
    
    # Buscar concepto SALDO FINAL CUENTAS
    concepto_saldo_final = db.query(ConceptoFlujoCaja).filter(
        ConceptoFlujoCaja.nombre == 'SALDO FINAL CUENTAS'
    ).first()
    
    if concepto_saldo_final:
        print(f'‚úÖ Concepto encontrado: {concepto_saldo_final.nombre} (ID: {concepto_saldo_final.id})')
        
        # Buscar transacci√≥n del d√≠a anterior
        transaccion_dia_anterior = db.query(TransaccionFlujoCaja).filter(
            TransaccionFlujoCaja.fecha == dia_anterior,
            TransaccionFlujoCaja.concepto_id == concepto_saldo_final.id
        ).first()
        
        if transaccion_dia_anterior:
            saldo_inicial = transaccion_dia_anterior.monto
            print(f'‚úÖ SALDO FINAL CUENTAS del d√≠a anterior encontrado: ${saldo_inicial}')
            print(f'üéØ El saldo inicial para {dia_actual} deber√≠a ser: ${saldo_inicial}')
            
            # Verificar si ya existe un saldo inicial para el d√≠a 4
            concepto_saldo_inicial = db.query(ConceptoFlujoCaja).filter(
                ConceptoFlujoCaja.nombre.like('%SALDO INICIAL%')
            ).first()
            
            if concepto_saldo_inicial:
                print(f'üìã Concepto saldo inicial: {concepto_saldo_inicial.nombre} (ID: {concepto_saldo_inicial.id})')
                
                # Buscar si ya existe transacci√≥n de saldo inicial para el d√≠a 4
                trans_saldo_inicial = db.query(TransaccionFlujoCaja).filter(
                    TransaccionFlujoCaja.fecha == dia_actual,
                    TransaccionFlujoCaja.concepto_id == concepto_saldo_inicial.id
                ).first()
                
                if trans_saldo_inicial:
                    print(f'‚ö†Ô∏è Ya existe saldo inicial para el d√≠a 4: ${trans_saldo_inicial.monto}')
                else:
                    print(f'‚ú® No existe saldo inicial para el d√≠a 4, se puede crear autom√°ticamente')
                    
                    # Simular la creaci√≥n autom√°tica que har√≠a el frontend
                    print(f'üîÑ El frontend ahora puede crear autom√°ticamente:')
                    print(f'   - Fecha: {dia_actual}')
                    print(f'   - Concepto: {concepto_saldo_inicial.nombre}')
                    print(f'   - Monto: ${saldo_inicial}')
                    print(f'   - Descripci√≥n: "Saldo inicial desde d√≠a anterior"')
        else:
            print(f'‚ùå No se encontr√≥ SALDO FINAL CUENTAS para {dia_anterior}')
    else:
        print('‚ùå No se encontr√≥ concepto SALDO FINAL CUENTAS')
    
    print(f'\nüéâ ¬°Problema resuelto! El saldo inicial ahora deber√≠a cargar autom√°ticamente.')

if __name__ == "__main__":
    main()
