#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Test para verificar que VENTANILLA se sincroniza autom√°ticamente 
cuando se actualiza SUBTOTAL MOVIMIENTO PAGADURIA via trigger autom√°tico
"""

import os
import sys
from datetime import datetime, date
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from app.core.database import SessionLocal
from app.services.dependencias_flujo_caja_service import DependenciasFlujoCajaService
from app.models.transacciones_flujo_caja import TransaccionFlujoCaja, AreaTransaccion
from decimal import Decimal
from sqlalchemy import text

def main():
    print("=== TEST: TRIGGER AUTOM√ÅTICO VENTANILLA ===")
    print("üéØ Verificando que VENTANILLA se sincroniza autom√°ticamente cuando se actualiza SUBTOTAL MOVIMIENTO")
    
    db = SessionLocal()
    try:
        fecha_test = date(2025, 9, 10)
        print(f"üìÖ Fecha: {fecha_test}")
        
        # 1. Limpiar datos anteriores
        print("\n1. Limpiando datos anteriores...")
        db.execute(text("""
            DELETE FROM transacciones_flujo_caja
            WHERE fecha = :fecha
            AND concepto_id IN (3, 55, 56, 82)
            AND cuenta_id = 1
        """), {"fecha": fecha_test})
        db.commit()
        
        # 2. Crear datos base que generen SUBTOTAL MOVIMIENTO
        print("\n2. Creando datos base...")
        
        # Crear conceptos que formar√°n SUBTOTAL MOVIMIENTO (ID 82)
        concepto_ingreso = TransaccionFlujoCaja(
            fecha=fecha_test,
            concepto_id=55,  # INGRESO (c√≥digo I)
            cuenta_id=1,
            monto=Decimal('800.00'),
            descripcion="Test - Trigger INGRESO",
            usuario_id=6,
            area=AreaTransaccion.pagaduria,
            compania_id=1,
            auditoria={"test": "trigger_ventanilla", "tipo": "concepto_base"}
        )
        
        concepto_egreso = TransaccionFlujoCaja(
            fecha=fecha_test,
            concepto_id=56,  # EGRESO (c√≥digo E)
            cuenta_id=1,
            monto=Decimal('300.00'),
            descripcion="Test - Trigger EGRESO",
            usuario_id=6,
            area=AreaTransaccion.pagaduria,
            compania_id=1,
            auditoria={"test": "trigger_ventanilla", "tipo": "concepto_base"}
        )
        
        db.add_all([concepto_ingreso, concepto_egreso])
        db.commit()
        
        subtotal_esperado = Decimal('800.00') - Decimal('300.00')  # 500
        print(f"   ‚úÖ INGRESO: ${concepto_ingreso.monto} (+)")
        print(f"   ‚úÖ EGRESO: ${concepto_egreso.monto} (-)")
        print(f"   üìä SUBTOTAL MOVIMIENTO esperado: ${subtotal_esperado}")
        
        # 3. Verificar estado ANTES del procesamiento
        print(f"\n3. Estado ANTES del procesamiento pagadur√≠a...")
        
        ventanilla_antes = db.execute(text("""
            SELECT COUNT(*), COALESCE(SUM(monto), 0) as total
            FROM transacciones_flujo_caja
            WHERE fecha = :fecha AND concepto_id = 3 AND cuenta_id = 1
        """), {"fecha": fecha_test}).fetchone()
        
        count_ventanilla_antes, monto_ventanilla_antes = ventanilla_antes
        print(f"   üè™ VENTANILLA antes: {count_ventanilla_antes} registros, Total: ${monto_ventanilla_antes}")
        
        # 4. Ejecutar SOLO procesamiento de pagadur√≠a (que deber√≠a disparar trigger)
        print(f"\n4. Ejecutando procesamiento de pagadur√≠a (con trigger autom√°tico)...")
        service = DependenciasFlujoCajaService(db)
        
        # Ejecutar SOLO el procesamiento de pagadur√≠a que deber√≠a incluir el trigger
        resultados_pagaduria = service._procesar_dependencias_pagaduria(
            fecha=fecha_test,
            cuenta_id=1,
            compania_id=1,
            usuario_id=6
        )
        
        print(f"   üìä Resultados pagadur√≠a: {len(resultados_pagaduria)} actualizaciones")
        
        # 5. Verificar si se proces√≥ SUBTOTAL MOVIMIENTO y se dispar√≥ trigger
        subtotal_procesado = False
        ventanilla_trigger = False
        
        for resultado in resultados_pagaduria:
            concepto_id = resultado.get('concepto_id')
            concepto_nombre = resultado.get('concepto_nombre', 'N/A')
            monto_nuevo = resultado.get('monto_nuevo', 0)
            
            print(f"   ‚Ä¢ [{concepto_id}] {concepto_nombre}: ${monto_nuevo}")
            
            if concepto_id == 82:  # SUBTOTAL MOVIMIENTO
                subtotal_procesado = True
                print(f"     ‚úÖ SUBTOTAL MOVIMIENTO procesado: ${monto_nuevo}")
                
            if concepto_id == 3:  # VENTANILLA
                ventanilla_trigger = True
                tipo_trigger = resultado.get('tipo_trigger')
                print(f"     üî• TRIGGER VENTANILLA detectado: ${monto_nuevo}")
                if tipo_trigger:
                    print(f"     üìù Tipo trigger: {tipo_trigger}")
        
        # 6. Verificar estado DESPU√âS del procesamiento
        print(f"\n6. Estado DESPU√âS del procesamiento...")
        
        subtotal_despues = db.execute(text("""
            SELECT monto FROM transacciones_flujo_caja
            WHERE fecha = :fecha AND concepto_id = 82 AND cuenta_id = 1
        """), {"fecha": fecha_test}).fetchone()
        
        ventanilla_despues = db.execute(text("""
            SELECT monto FROM transacciones_flujo_caja
            WHERE fecha = :fecha AND concepto_id = 3 AND cuenta_id = 1
        """), {"fecha": fecha_test}).fetchone()
        
        monto_subtotal_final = subtotal_despues[0] if subtotal_despues else Decimal('0')
        monto_ventanilla_final = ventanilla_despues[0] if ventanilla_despues else Decimal('0')
        
        print(f"   üìä SUBTOTAL MOVIMIENTO final: ${monto_subtotal_final}")
        print(f"   üè™ VENTANILLA final: ${monto_ventanilla_final}")
        
        # 7. Validaci√≥n del trigger autom√°tico
        print(f"\n7. Validaci√≥n del trigger autom√°tico...")
        
        trigger_exitoso = (
            subtotal_procesado and 
            ventanilla_trigger and
            monto_subtotal_final == subtotal_esperado and
            monto_ventanilla_final == monto_subtotal_final
        )
        
        if trigger_exitoso:
            print(f"   üéâ ¬°TRIGGER AUTOM√ÅTICO EXITOSO!")
            print(f"   ‚úÖ SUBTOTAL MOVIMIENTO calculado: ${monto_subtotal_final}")
            print(f"   ‚úÖ VENTANILLA sincronizado autom√°ticamente: ${monto_ventanilla_final}")
            print(f"   ‚ú® La sincronizaci√≥n ahora es autom√°tica al procesar pagadur√≠a")
        else:
            print(f"   ‚ùå TRIGGER AUTOM√ÅTICO FALL√ì:")
            print(f"   ‚Ä¢ SUBTOTAL procesado: {subtotal_procesado}")
            print(f"   ‚Ä¢ VENTANILLA trigger: {ventanilla_trigger}")
            print(f"   ‚Ä¢ Subtotal correcto: {monto_subtotal_final == subtotal_esperado}")
            print(f"   ‚Ä¢ Sincronizaci√≥n correcta: {monto_ventanilla_final == monto_subtotal_final}")
        
        # 8. Test de modificaci√≥n subsecuente
        print(f"\n8. Test: Modificando conceptos base para verificar re-sincronizaci√≥n...")
        
        # Cambiar el INGRESO
        concepto_ingreso.monto = Decimal('1200.00')
        concepto_ingreso.descripcion = "Test - Trigger INGRESO modificado"
        db.commit()
        
        nuevo_subtotal_esperado = Decimal('1200.00') - Decimal('300.00')  # 900
        print(f"   üîÑ INGRESO cambiado: $800 ‚Üí $1200")
        print(f"   üìä Nuevo SUBTOTAL esperado: ${nuevo_subtotal_esperado}")
        
        # Re-procesar pagadur√≠a
        resultados_modificacion = service._procesar_dependencias_pagaduria(
            fecha=fecha_test,
            cuenta_id=1,
            compania_id=1,
            usuario_id=6
        )
        
        # Verificar nueva sincronizaci√≥n
        subtotal_final = db.execute(text("""
            SELECT monto FROM transacciones_flujo_caja
            WHERE fecha = :fecha AND concepto_id = 82 AND cuenta_id = 1
        """), {"fecha": fecha_test}).fetchone()
        
        ventanilla_final = db.execute(text("""
            SELECT monto FROM transacciones_flujo_caja
            WHERE fecha = :fecha AND concepto_id = 3 AND cuenta_id = 1
        """), {"fecha": fecha_test}).fetchone()
        
        monto_subtotal_nuevo = subtotal_final[0] if subtotal_final else Decimal('0')
        monto_ventanilla_nuevo = ventanilla_final[0] if ventanilla_final else Decimal('0')
        
        print(f"   üìä SUBTOTAL MOVIMIENTO nuevo: ${monto_subtotal_nuevo}")
        print(f"   üè™ VENTANILLA nuevo: ${monto_ventanilla_nuevo}")
        
        re_sincronizacion_exitosa = (
            monto_subtotal_nuevo == nuevo_subtotal_esperado and
            monto_ventanilla_nuevo == monto_subtotal_nuevo
        )
        
        if re_sincronizacion_exitosa:
            print(f"   üéâ ¬°RE-SINCRONIZACI√ìN AUTOM√ÅTICA EXITOSA!")
        else:
            print(f"   ‚ùå Re-sincronizaci√≥n fall√≥")
        
        # 9. Resultado final
        if trigger_exitoso and re_sincronizacion_exitosa:
            print(f"\nüöÄ ¬°√âXITO TOTAL! El trigger autom√°tico funciona perfectamente:")
            print(f"   ‚úÖ VENTANILLA se sincroniza autom√°ticamente al procesar pagadur√≠a")
            print(f"   ‚úÖ Los cambios en conceptos base disparan la sincronizaci√≥n autom√°tica")
            print(f"   ‚úÖ No necesitas tocar tesorer√≠a para que VENTANILLA se actualice")
        else:
            print(f"\n‚ùå El trigger autom√°tico necesita ajustes")
            
    except Exception as e:
        print(f"\n‚ùå ERROR: {e}")
        import traceback
        traceback.print_exc()
        
    finally:
        db.close()

if __name__ == "__main__":
    main()
