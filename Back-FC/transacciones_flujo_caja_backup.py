"""
API endpoints para gesti√≥n de transacciones de flujo de caja
"""
import logging
from typing import List, Optional
from fastapi import APIRouter, Depends, HTTPException, status, Query
from sqlalchemy.orm import Session
from datetime import date

logger = logging.getLogger(__name__)

from ..core.database import get_db
from ..models import TransaccionFlujoCaja, AreaTransaccion
from ..schemas.flujo_caja import (
    TransaccionFlujoCajaCreate,
    TransaccionFlujoCajaUpdate, 
    TransaccionFlujoCajaResponse,
    FlujoCajaDiarioResponse,
    FlujoCajaResumenResponse,
    AreaTransaccionSchema,
    AreaConceptoSchema
)
from ..services.transaccion_flujo_caja_service import TransaccionFlujoCajaService
from ..services.dependencias_flujo_caja_service import DependenciasFlujoCajaService
from ..api.auth import get_current_user

logger = logging.getLogger(__name__)
router = APIRouter(prefix="/api/transacciones-flujo-caja", tags=["Transacciones Flujo de Caja"])

@router.post("/", response_model=TransaccionFlujoCajaResponse, status_code=status.HTTP_201_CREATED)
def crear_transaccion(
    transaccion_data: TransaccionFlujoCajaCreate,
    db: Session = Depends(get_db),
    current_user = Depends(get_current_user)
):
    """Crear una nueva transacci√≥n de flujo de caja"""
    try:
        # üö´ VALIDACI√ìN: Verificar si es un concepto auto-calculado
        conceptos_auto_calculados = [3, 52, 54, 82, 83, 84, 85]  # VENTANILLA, DIFERENCIA SALDOS, SALDO DIA ANTERIOR, SUBTOTAL MOVIMIENTO, etc.
        
        if transaccion_data.concepto_id in conceptos_auto_calculados:
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail=f"No se puede crear manualmente el concepto ID {transaccion_data.concepto_id}. Este valor se calcula autom√°ticamente."
            )
        
        logger.info(f"Creando transacci√≥n: concepto_id={transaccion_data.concepto_id}, monto={transaccion_data.monto}, usuario={current_user.id}")
        
        service = TransaccionFlujoCajaService(db)
        transaccion = service.crear_transaccion(transaccion_data, current_user.id)
        
        # üî• AUTO-REC√ÅLCULO COMPLETO: Procesar AMBOS dashboards para mantener consistencia
        dependencias_service = DependenciasFlujoCajaService(db)
        try:
            resultados_completos = dependencias_service.procesar_dependencias_completas_ambos_dashboards(
                fecha=transaccion_data.fecha,
                concepto_modificado_id=transaccion_data.concepto_id,
                cuenta_id=transaccion_data.cuenta_id,
                compania_id=getattr(current_user, "compania_id", 1),
                usuario_id=current_user.id
            )
            
            total_updates = (
                len(resultados_completos.get("tesoreria", [])) + 
                len(resultados_completos.get("pagaduria", [])) + 
                len(resultados_completos.get("cross_dashboard", []))
            )
            logger.info(f"Rec√°lculo completo ejecutado: {total_updates} actualizaciones en ambos dashboards")
            
        except Exception as e:
            logger.warning(f"Error en rec√°lculo completo: {e}")
            # No falla la creaci√≥n si hay error en dependencias
        
        print(f"‚úÖ Transacci√≥n creada exitosamente: ID {transaccion.id}")
        return transaccion
    except ValueError as e:
        print(f"‚ùå Error de validaci√≥n: {str(e)}")
        raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST, detail=str(e))
    except Exception as e:
        print(f"üí• Error interno: {str(e)}")
        print(f"üí• Tipo de error: {type(e).__name__}")
        import traceback
        print(f"üí• Traceback: {traceback.format_exc()}")
        raise HTTPException(status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail=f"Error interno del servidor: {str(e)}")

@router.get("/fecha/{fecha}", response_model=List[TransaccionFlujoCajaResponse])
def obtener_transacciones_por_fecha(
    fecha: date,
    area: Optional[AreaTransaccionSchema] = Query(None, description="Filtrar por √°rea"),
    db: Session = Depends(get_db),
    current_user = Depends(get_current_user)
):
    """Obtener todas las transacciones de una fecha espec√≠fica"""
    service = TransaccionFlujoCajaService(db)
    
    # üî• AUTO-INICIALIZACI√ìN: Asegurar que existe SALDO INICIAL para esta fecha
    dependencias_service = DependenciasFlujoCajaService(db)
    try:
        # Ejecutar auto-c√°lculo de SALDO INICIAL si es necesario
        dependencias_service._procesar_saldo_inicial_automatico(
            fecha=fecha,
            compania_id=getattr(current_user, "compania_id", 1),
            usuario_id=getattr(current_user, "id", 1)
        )
    except Exception as e:
        # Si hay error, log pero no fallar la consulta
        import logging
        logging.warning(f"Error en auto-inicializaci√≥n SALDO INICIAL para {fecha}: {e}")
    
    transacciones = service.obtener_transacciones_por_fecha(fecha, area)
    return transacciones

@router.get("/{transaccion_id}", response_model=TransaccionFlujoCajaResponse)
def obtener_transaccion(
    transaccion_id: int,
    db: Session = Depends(get_db),
    current_user = Depends(get_current_user)
):
    """Obtener una transacci√≥n espec√≠fica por ID"""
    service = TransaccionFlujoCajaService(db)
    transaccion = service.obtener_transaccion_por_id(transaccion_id)
    
    if not transaccion:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail="Transacci√≥n no encontrada")
    
    return transaccion

@router.put("/{transaccion_id}", response_model=TransaccionFlujoCajaResponse)
def actualizar_transaccion(
    transaccion_id: int,
    transaccion_data: TransaccionFlujoCajaUpdate,
    db: Session = Depends(get_db),
    current_user = Depends(get_current_user)
):
    """Actualizar una transacci√≥n existente"""
    logger.info(f"üö®üö®üö® API PUT /transacciones/{transaccion_id} LLAMADO üö®üö®üö®")
    logger.info(f"üìã Datos recibidos: {transaccion_data.model_dump()}")
    logger.info(f"üë§ Usuario: {current_user.id if hasattr(current_user, 'id') else 'Unknown'}")
    try:
        # ÔøΩ VALIDACI√ìN: Verificar si es un concepto auto-calculado
        service = TransaccionFlujoCajaService(db)
        transaccion_existente = service.obtener_transaccion_por_id(transaccion_id)
        
        if not transaccion_existente:
            raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail="Transacci√≥n no encontrada")
        
        conceptos_auto_calculados = [3, 52, 54, 82, 83, 84, 85]  # VENTANILLA, DIFERENCIA SALDOS, SALDO DIA ANTERIOR, SUBTOTAL MOVIMIENTO, etc.
        
        if transaccion_existente.concepto_id in conceptos_auto_calculados:
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail=f"No se puede modificar manualmente el concepto ID {transaccion_existente.concepto_id}. Este valor se calcula autom√°ticamente."
            )
        
        print(f"üîÑ Actualizando transacci√≥n ID {transaccion_id}: {transaccion_data.dict()}")
        print(f"üë§ Usuario: {current_user.id}")
        
        transaccion = service.actualizar_transaccion(transaccion_id, transaccion_data, current_user.id)
        
        # üî• AUTO-DEPENDENCIAS: Si es pagadur√≠a y concepto cr√≠tico, procesar dependencias
        if (transaccion.area == AreaTransaccion.pagaduria):
            # Conceptos que trigger auto-procesamiento: SALDOS EN BANCOS, SALDO DIA ANTERIOR, y conceptos de movimiento (55-81)
            conceptos_trigger = [53, 54] + list(range(55, 82))  # 53, 54, 55, 56, ..., 81
            
            if transaccion.concepto_id in conceptos_trigger:
                dependencias_service = DependenciasFlujoCajaService(db)
                try:
                    dependencias_service.procesar_dependencias_avanzadas(
                        fecha=transaccion.fecha,
                        area=AreaTransaccionSchema.pagaduria,
                        concepto_modificado_id=transaccion.concepto_id,
                        cuenta_id=transaccion.cuenta_id,
                        compania_id=getattr(current_user, "compania_id", 1),
                        usuario_id=current_user.id
                    )
                    print(f"‚úÖ Dependencias de pagadur√≠a procesadas para concepto {transaccion.concepto_id}")
                except Exception as e:
                    print(f"‚ö†Ô∏è Error procesando dependencias pagadur√≠a: {e}")
        
        print(f"‚úÖ Transacci√≥n actualizada exitosamente: ID {transaccion.id}")
        return transaccion
    except ValueError as e:
        print(f"‚ùå Error de validaci√≥n en actualizaci√≥n: {str(e)}")
        raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST, detail=str(e))
    except Exception as e:
        print(f"üí• Error interno en actualizaci√≥n: {str(e)}")
        print(f"üí• Tipo de error: {type(e).__name__}")
        import traceback
        print(f"üí• Traceback: {traceback.format_exc()}")
        raise HTTPException(status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail=f"Error interno del servidor: {str(e)}")

# M√âTODO DUPLICADO ELIMINADO - Solo mantenemos el primer m√©todo PUT con auto-c√°lculo

@router.post("/recalcular-dependencias/{fecha}", status_code=status.HTTP_200_OK)
def recalcular_dependencias_fecha(
    fecha: date,
    db: Session = Depends(get_db),
    current_user = Depends(get_current_user)
):
    """Actualizar una transacci√≥n existente con rec√°lculo autom√°tico de dependencias"""
    try:
        # üö´ VALIDACI√ìN: Verificar si es un concepto auto-calculado
        conceptos_auto_calculados = [3, 52, 54, 82, 83, 84, 85]
        
        # Obtener la transacci√≥n actual para verificar el concepto
        transaccion_actual = db.query(TransaccionFlujoCaja).filter(TransaccionFlujoCaja.id == transaccion_id).first()
        if not transaccion_actual:
            raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail="Transacci√≥n no encontrada")
        
        if transaccion_actual.concepto_id in conceptos_auto_calculados:
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail=f"No se puede modificar manualmente el concepto ID {transaccion_actual.concepto_id}. Este valor se calcula autom√°ticamente."
            )
        
        logger.info(f"ÔøΩüö®üö® API PUT /transacciones/{transaccion_id} - M√âTODO 2 LLAMADO üö®üö®üö®")
        logger.info(f"üìã Datos recibidos m√©todo 2: {transaccion_data.model_dump()}")
        logger.info(f"üë§ Usuario m√©todo 2: {current_user.id}")
        
        service = TransaccionFlujoCajaService(db)
        transaccion = service.actualizar_transaccion(transaccion_id, transaccion_data, current_user.id)
        
        # üî• AUTO-REC√ÅLCULO COMPLETO: Procesar AMBOS dashboards tras actualizaci√≥n
        dependencias_service = DependenciasFlujoCajaService(db)
        try:
            resultados_completos = dependencias_service.procesar_dependencias_completas_ambos_dashboards(
                fecha=transaccion.fecha,
                concepto_modificado_id=transaccion.concepto_id,
                cuenta_id=transaccion.cuenta_id,
                compania_id=getattr(current_user, "compania_id", 1),
                usuario_id=current_user.id
            )
            
            total_updates = (
                len(resultados_completos.get("tesoreria", [])) + 
                len(resultados_completos.get("pagaduria", [])) + 
                len(resultados_completos.get("cross_dashboard", []))
            )
            print(f"üîÑ Rec√°lculo completo tras actualizaci√≥n: {total_updates} actualizaciones en ambos dashboards")
            
        except Exception as e:
            print(f"‚ö†Ô∏è Error en rec√°lculo completo tras actualizaci√≥n: {e}")
        
        print(f"‚úÖ Transacci√≥n actualizada exitosamente: ID {transaccion.id}")
        return transaccion
        
    except ValueError as e:
        print(f"‚ùå Error de validaci√≥n en actualizaci√≥n: {str(e)}")
        raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST, detail=str(e))
    except Exception as e:
        print(f"üí• Error interno en actualizaci√≥n: {str(e)}")
        import traceback
        print(f"üí• Traceback: {traceback.format_exc()}")
        raise HTTPException(status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail=f"Error interno del servidor: {str(e)}")

@router.post("/recalcular-dependencias/{fecha}", status_code=status.HTTP_200_OK)
def recalcular_dependencias_fecha(
    fecha: date,
    db: Session = Depends(get_db),
    current_user = Depends(get_current_user)
):
    """
    Endpoint para recalcular TODAS las dependencias de una fecha espec√≠fica.
    √ötil para sincronizaci√≥n manual o despu√©s de cambios importantes.
    """
    try:
        print(f"üîÑ Iniciando rec√°lculo manual para fecha {fecha}")
        
        dependencias_service = DependenciasFlujoCajaService(db)
        resultados_completos = dependencias_service.procesar_dependencias_completas_ambos_dashboards(
            fecha=fecha,
            compania_id=getattr(current_user, "compania_id", 1),
            usuario_id=current_user.id
        )
        
        total_updates = (
            len(resultados_completos.get("tesoreria", [])) + 
            len(resultados_completos.get("pagaduria", [])) + 
            len(resultados_completos.get("cross_dashboard", []))
        )
        
        resultado = {
            "mensaje": f"Rec√°lculo completado para {fecha}",
            "fecha": fecha,
            "total_actualizaciones": total_updates,
            "detalles": {
                "tesoreria_updates": len(resultados_completos.get("tesoreria", [])),
                "pagaduria_updates": len(resultados_completos.get("pagaduria", [])),
                "cross_dashboard_updates": len(resultados_completos.get("cross_dashboard", []))
            },
            "resultados_completos": resultados_completos
        }
        
        print(f"‚úÖ Rec√°lculo manual completado: {total_updates} actualizaciones")
        return resultado
        
    except Exception as e:
        print(f"‚ùå Error en rec√°lculo manual: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Error en rec√°lculo: {str(e)}"
        )

@router.delete("/{transaccion_id}", status_code=status.HTTP_204_NO_CONTENT)
def eliminar_transaccion(
    transaccion_id: int,
    db: Session = Depends(get_db),
    current_user = Depends(get_current_user)
):
    """Eliminar una transacci√≥n"""
    service = TransaccionFlujoCajaService(db)
    eliminado = service.eliminar_transaccion(transaccion_id, current_user.id)
    
    if not eliminado:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail="Transacci√≥n no encontrada")

# ============================================
# ENDPOINTS PARA REPORTES Y DASHBOARDS
# ============================================

@router.get("/flujo-diario/{fecha}/{area}", response_model=FlujoCajaDiarioResponse)
def obtener_flujo_caja_diario(
    fecha: date,
    area: AreaConceptoSchema,
    db: Session = Depends(get_db),
    current_user = Depends(get_current_user)
):
    """Obtener el flujo de caja completo de un d√≠a espec√≠fico para un √°rea"""
    service = TransaccionFlujoCajaService(db)
    flujo_diario = service.obtener_flujo_caja_diario(fecha, area)
    return flujo_diario

@router.get("/resumen-periodo/{fecha_inicio}/{fecha_fin}/{area}", response_model=FlujoCajaResumenResponse)
def obtener_resumen_periodo(
    fecha_inicio: date,
    fecha_fin: date,
    area: AreaConceptoSchema,
    db: Session = Depends(get_db),
    current_user = Depends(get_current_user)
):
    """Obtener resumen del flujo de caja para un per√≠odo espec√≠fico"""
    if fecha_inicio > fecha_fin:
        raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST, detail="La fecha de inicio debe ser menor o igual a la fecha de fin")
    
    service = TransaccionFlujoCajaService(db)
    resumen = service.obtener_resumen_periodo(fecha_inicio, fecha_fin, area)
    return resumen

# ============================================
# ENDPOINTS ESPEC√çFICOS PARA DASHBOARDS
# ============================================

@router.get("/dashboard/tesoreria/{fecha}", response_model=FlujoCajaDiarioResponse)
def obtener_dashboard_tesoreria(
    fecha: date,
    db: Session = Depends(get_db),
    current_user = Depends(get_current_user)
):
    """Obtener datos espec√≠ficos para el dashboard de tesorer√≠a"""
    service = TransaccionFlujoCajaService(db)
    flujo_diario = service.obtener_flujo_caja_diario(fecha, AreaConceptoSchema.tesoreria)
    return flujo_diario

@router.get("/dashboard/pagaduria/{fecha}", response_model=FlujoCajaDiarioResponse)
def obtener_dashboard_pagaduria(
    fecha: date,
    db: Session = Depends(get_db),
    current_user = Depends(get_current_user)
):
    """Obtener datos espec√≠ficos para el dashboard de pagadur√≠a"""
    
    # üî• AUTO-PROCESAMIENTO: Ejecutar dependencias de pagadur√≠a
    dependencias_service = DependenciasFlujoCajaService(db)
    try:
        # Procesar dependencias autom√°ticas de pagadur√≠a
        dependencias_service.procesar_dependencias_avanzadas(
            fecha=fecha,
            area=AreaTransaccionSchema.pagaduria,
            compania_id=getattr(current_user, "compania_id", 1),
            usuario_id=getattr(current_user, "id", 1)
        )
    except Exception as e:
        # Si hay error, log pero no fallar la consulta
        import logging
        logging.warning(f"Error en auto-procesamiento pagadur√≠a para {fecha}: {e}")
    
    service = TransaccionFlujoCajaService(db)
    flujo_diario = service.obtener_flujo_caja_diario(fecha, AreaConceptoSchema.pagaduria)
    return flujo_diario

# ============================================
# ENDPOINTS PARA MANEJO MASIVO
# ============================================

@router.post("/importar-masivo")
def importar_transacciones_masivo(
    transacciones: List[TransaccionFlujoCajaCreate],
    db: Session = Depends(get_db),
    current_user = Depends(get_current_user)
):
    """Importar m√∫ltiples transacciones de una vez"""
    service = TransaccionFlujoCajaService(db)
    resultados = {"exitosas": 0, "fallidas": 0, "errores": []}
    
    for i, transaccion_data in enumerate(transacciones):
        try:
            service.crear_transaccion(transaccion_data, current_user.id)
            resultados["exitosas"] += 1
        except Exception as e:
            resultados["fallidas"] += 1
            resultados["errores"].append({
                "indice": i,
                "transaccion": transaccion_data.dict(),
                "error": str(e)
            })
    
    return resultados

@router.delete("/eliminar-fecha/{fecha}")
def eliminar_transacciones_fecha(
    fecha: date,
    area: Optional[AreaTransaccionSchema] = Query(None, description="√Årea espec√≠fica a eliminar"),
    confirmar: bool = Query(False, description="Confirmar eliminaci√≥n"),
    db: Session = Depends(get_db),
    current_user = Depends(get_current_user)
):
    """Eliminar todas las transacciones de una fecha espec√≠fica"""
    if not confirmar:
        raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST, detail="Debe confirmar la eliminaci√≥n con el par√°metro 'confirmar=true'")
    
    service = TransaccionFlujoCajaService(db)
    transacciones = service.obtener_transacciones_por_fecha(fecha, area)
    
    eliminadas = 0
    for transaccion in transacciones:
        if service.eliminar_transaccion(transaccion.id, current_user.id):
            eliminadas += 1
    
    return {"message": f"Se eliminaron {eliminadas} transacciones de la fecha {fecha}"}
